generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DB_PRISMA_URL") // uses connection pooling
  directUrl = env("DB_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Plant         Plant[]
}

// {"id": "P_01_HOME", "light": 94, "soil_humidity": 40, "air_humidity": 65, "temperature": 94}

model Plant {
  id           String         @id @default(cuid())
  name         String
  light        Int
  soilHumidity Int
  airHumidity  Int
  temperature  Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  imageURL     String?
  plantHistory PlantHistory[]
}

model PlantHistory {
  id           String   @id @default(cuid())
  light        Int
  soilHumidity Int
  airHumidity  Int
  temperature  Int
  date         DateTime @db.Date
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  plant        Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)
  plantId      String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
